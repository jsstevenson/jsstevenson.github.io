<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://jsstevenson.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://jsstevenson.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-02-11T02:14:20+00:00</updated><id>https://jsstevenson.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html"></title><link href="https://jsstevenson.github.io/blog/2024/2024-02-08-auprc-optimistic/" rel="alternate" type="text/html" title=""/><published>2024-02-11T02:14:20+00:00</published><updated>2024-02-11T02:14:20+00:00</updated><id>https://jsstevenson.github.io/blog/2024/2024-02-08-auprc-optimistic</id><content type="html" xml:base="https://jsstevenson.github.io/blog/2024/2024-02-08-auprc-optimistic/"><![CDATA[<p>Chen et al, fresh from the bioRxiv, <a href="https://www.biorxiv.org/content/10.1101/2024.02.02.578654v1">write</a>:</p> <blockquote> <p>The precision-recall curve (PRC) and the area under it (AUPRC) are useful for quantifying classification performance. They are commonly used in situations with imbalanced classes, such as cancer diagnosis and cell type annotation. We evaluated 10 popular tools for plotting PRC and computing AUPRC, which were collectively used in &gt;3,000 published studies. We found the AUPRC values computed by the tools rank classifiers differently and some tools produce overly-optimistic results.</p> </blockquote> <p>There are, apparently, a handful of different ways to compute the “curves” for PRC and AUROC, which makes sense (given that they’re all built from discrete values), and apparently (per this paper) some consensus that certain methods are more “optimistic” than they should be. It goes on to detail inconsistencies in method usage (and visualization) between core statistical libraries, including <code class="language-plaintext highlighter-rouge">scikit-learn</code>, with pretty striking results:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/auprc_figure-480.webp 480w,/assets/img/auprc_figure-800.webp 800w,/assets/img/auprc_figure-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/auprc_figure.png" class="img-fluid z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>In some cases, these are pretty startling differences. They do note that, in the case of <code class="language-plaintext highlighter-rouge">scikit-learn</code>, the documentation at least notes the particulars of the method used, but personally, it wasn’t something I’d ever thought to pay attention to before.</p>]]></content><author><name></name></author></entry><entry><title type="html">Nvim-Tmux: Tools for Tmux scripting and configuration</title><link href="https://jsstevenson.github.io/blog/2022/nvim-tmux/" rel="alternate" type="text/html" title="Nvim-Tmux: Tools for Tmux scripting and configuration"/><published>2022-08-17T00:00:00+00:00</published><updated>2022-08-17T00:00:00+00:00</updated><id>https://jsstevenson.github.io/blog/2022/nvim-tmux</id><content type="html" xml:base="https://jsstevenson.github.io/blog/2022/nvim-tmux/"><![CDATA[<p>Tmux, the popular terminal window manager, uses a quirky DSL for its configuration files. The language doesn’t really have a name – I guess it’s just “Tmux” – and it conveniently mirrors the way commands are issued as arguments to the Tmux executable, i.e. the statement <code class="language-plaintext highlighter-rouge">set-option -ga status-style fg=#c0caf5</code> is interpreted as if you’d entered <code class="language-plaintext highlighter-rouge">tmux set-option -ga status-style fg=#c0caf5</code> into an active shell. It does include a couple extra tricks, though, such as the ability to conditionally execute quoted commands in the parent shell, wrapped in a pretty ugly <code class="language-plaintext highlighter-rouge">if-shell</code> statement. And it gets worse if you want to spill those commands onto multiple lines.</p> <p>All of this is to say that there’s some room for editor plugins to make Tmux scripting easier. Along these lines, I’ve been working on <a href="https://github.com/jsstevenson/nvim-tmux">Nvim-Tmux</a>, a Neovim-native Lua port/fork of <a href="https://github.com/tmux-plugins/vim-tmux">Vim-Tmux</a>. While most Tmux-related Neovim plugins focus on connecting the editor to the multiplexer - integrating window operations, using Tmux’s command mode, etc. - Nvim-Tmux provides some tooling to assist in writing configurations and scripting in the Tmux “language”, such as it is. Some of it is basic: providing commands to continually re-source a <code class="language-plaintext highlighter-rouge">conf</code> file, for example, for live editing and feedback. Others are more aspirational: Nvim-Tmux lets you quickly pull up documentation for a command in a floating window with a single command, and I’m hoping to extend this to LSP hover-like functionality as well.</p> <p>One thing I’m excited about is some future <a href="https://tree-sitter.github.io/tree-sitter/">Treesitter</a> integration. While the Tmux DSL is probably simple enough for regex-based syntax highlighting to do the job (this <a href="https://github.com/nvim-treesitter/nvim-treesitter/blob/master/assets/example-cpp.png">isn’t always the case</a> with other langagues), Treesitter is particularly adept at identifying subcomponents of a source file that should employ a different language’s syntax highlighting rules, e.g. when HTML is embedded within JSX/TSX files. If I can wrangle up a Tmux Treesitter parser, then bash/zsh highlighting can be applied to quoted shell commands, instead of treating them like a big homogenous quote block.</p> <p>Nvim-Tmux is written entirely in Lua, with only one or two calls to vanilla Vim commands. This has been quite a learning experience! It’s very funny to search for a simple problem (say, string interpollation) in Lua and finding hits from World of Warcraft fan wikis among the top results. The extreme dynamic typing feels a little wobbly, and the challenge of printing tables in the native REPL is annoying, but I love that the community feels genuinely human-scale (a core tool like <a href="https://github.com/JohnnyMorganz/StyLua">Stylua</a> is written by a college student and only has 600 stars on GitHub), and the insanely minimal regex-like implementation grows on you once you <a href="https://www.lua.org/pil/20.1.html">understand its motivation</a>.</p> <p>I don’t know if I’ll ever find professional benefit from picking up a language that appears to be used chiefly by 15 year olds trying to make Minecraft mods, but I appreciate that Neovim chose something outside the somewhat weary circle of Python/JS scripting that dominates so many other editors.</p>]]></content><author><name></name></author><category term="neovim"/><category term="dev tools"/><category term="lua"/><category term="tmux"/><summary type="html"><![CDATA[Tmux, the popular terminal window manager, uses a quirky DSL for its configuration files. The language doesn’t really have a name – I guess it’s just “Tmux” – and it conveniently mirrors the way commands are issued as arguments to the Tmux executable, i.e. the statement set-option -ga status-style fg=#c0caf5 is interpreted as if you’d entered tmux set-option -ga status-style fg=#c0caf5 into an active shell. It does include a couple extra tricks, though, such as the ability to conditionally execute quoted commands in the parent shell, wrapped in a pretty ugly if-shell statement. And it gets worse if you want to spill those commands onto multiple lines.]]></summary></entry><entry><title type="html">Oxley: Building Pydantic classes from JSONschema at runtime</title><link href="https://jsstevenson.github.io/blog/2022/oxley/" rel="alternate" type="text/html" title="Oxley: Building Pydantic classes from JSONschema at runtime"/><published>2022-07-07T00:00:00+00:00</published><updated>2022-07-07T00:00:00+00:00</updated><id>https://jsstevenson.github.io/blog/2022/oxley</id><content type="html" xml:base="https://jsstevenson.github.io/blog/2022/oxley/"><![CDATA[<p>I’ve just pushed version 0.0.1 of <a href="https://github.com/jsstevenson/oxley/">Oxley</a>, a Python package that ingests JSONschema and dynamically constructs <a href="https://github.com/samuelcolvin/pydantic">Pydantic</a> classes and their attendant features, including runtime data validation, schema generation, and interoperability with web frameworks like <a href="https://fastapi.tiangolo.com/">FastAPI</a>. This is the first package I’ve published on PyPI that I’ve entirely self-produced, and I’m excited to see where it goes.</p> <p>The niche is a simple one: data streams are places of chaos, but forcing adherance to external schemas can ensure some kinds of correctness and enhance interoperability with other sources. JSONschema is a pretty good framework for writing schema definitions, and some solutions (e.g. <a href="https://github.com/cwacek/python-jsonschema-objects">Python-JSONschema-Objects</a>) enable easy and relatively well-featured runtime validation in Python environments. To my knowledge, though, Oxley is the first to employ Pydantic in this validation structure, which is great if you’re working on something like a FastAPI endpoint (as we often do in the <a href="https://github.com/GenomicMedLab">Wagner lab</a>). Even beyond standing up APIs, Pydantic has cemented itself as a Python developer favorite, and I think targeting its core functionality makes sense for fully fleshing out the possibilities of validation-by-schema.</p> <p>My current feature target is to fully represent everyting in the <a href="https://vrs.ga4gh.org/en/stable/">Variant Representation Specification</a>, but I’m also interested in covering other components of the 2020 spec (and earlier iterations as well, eventually). Pull requests welcome.</p>]]></content><author><name></name></author><category term="python"/><category term="oxley"/><category term="jsonschema"/><category term="pydantic"/><summary type="html"><![CDATA[I’ve just pushed version 0.0.1 of Oxley, a Python package that ingests JSONschema and dynamically constructs Pydantic classes and their attendant features, including runtime data validation, schema generation, and interoperability with web frameworks like FastAPI. This is the first package I’ve published on PyPI that I’ve entirely self-produced, and I’m excited to see where it goes.]]></summary></entry><entry><title type="html">Customizing the IPython interface</title><link href="https://jsstevenson.github.io/blog/2022/custom-ipython-colors/" rel="alternate" type="text/html" title="Customizing the IPython interface"/><published>2022-04-10T00:00:00+00:00</published><updated>2022-04-10T00:00:00+00:00</updated><id>https://jsstevenson.github.io/blog/2022/custom-ipython-colors</id><content type="html" xml:base="https://jsstevenson.github.io/blog/2022/custom-ipython-colors/"><![CDATA[<p>Syntax highlighting in IPython is a simple feature, but it’s a great one. The green-red back-and-forth between input and response makes scrolling back through a terminal session smooth and readable, and coloring individual tokens by semantic meaning is both informative and easy on the eyes, obviously (that’s why we do it in IDEs).</p> <p>However, if you use any kind of a custom terminal theme, this experience gets bumpier. IPython will generally lean on the basic ANSI colors set by your terminal, but (at least in my case – running zshell within Alacritty/Tmux) also summons a few colors that are definitely <em>not</em> in the specified color set, and can be pretty hard to read (bad) and ugly (obviously way worse).</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ipython_default-480.webp 480w,/assets/img/ipython_default-800.webp 800w,/assets/img/ipython_default-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/ipython_default.png" class="img-fluid z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Some of these are coming from my terminal – the light-green in the prompt, and the red traceback boundaries are correct. However, the dark green/bold, and especially the bolded blue in the traceback, are bypassing my terminal config, defined directly from IPython. And the blue, in particular, is basically unreadable against my shell background.</p> <p>There are a few out-of-the-box changes that can help, sort of. The <a href="https://ipython.readthedocs.io/en/stable/config/intro.html#setting-configurable-options">IPython config</a> provides a few options:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## Set the color scheme (NoColor, Neutral, Linux, or LightBG).
# c.InteractiveShell.colors = 'Neutral'
</span>
<span class="c1"># ...
</span>
<span class="c1">## The name or class of a Pygments style to use for syntax highlighting. To see
#  available styles, run `pygmentize -L styles`.
# c.TerminalInteractiveShell.highlighting_style = 'gruvbox-dark'
</span>
<span class="c1">## Override highlighting format for specific tokens
# c.TerminalInteractiveShell.highlighting_style_overrides = {}
</span></code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">InteractiveShell.colors</code> sets a general color scheme, affecting input syntax highlighting and feedback, but only offers four theme options. <code class="language-plaintext highlighter-rouge">TerminalInteractiveShell.highlighting_style</code> (and <code class="language-plaintext highlighter-rouge">TerminalInteractiveShell.highlighting_style_overrides</code>) provide many more choices by allowing the user to specify the colors that IPython provides to <a href="https://pygments.org/">Pygments</a> for highlightingtext, but can’t alter the colors used in feedback text (eg exception tracebacks).</p> <p>Now, the Pygments stuff is pretty great. It’s a regex-based highlighter, which means anyone used to tools like <a href="https://tree-sitter.github.io/tree-sitter/syntax-highlighting">Treesitter</a> will be a little disappointed, but it still affords a decent amount of granularity for color choices, and lets you define general token classes (like Number) and then provide different selections for subcomponents (like Number.Float). I couldn’t find a master list of token types used in the Python lexer, though, so I had to reconstruct an approximation from the <a href="https://github.com/pygments/pygments/blob/c155bc4e52e313a51a03f9dcafa64b92701a6829/pygments/lexers/python.py#L28">source code</a>:</p> <table> <thead> <tr> <th>Token</th> <th>What’s included</th> </tr> </thead> <tbody> <tr> <td><code class="language-plaintext highlighter-rouge">Text</code></td> <td>Catch-all for anything not otherwise defined</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">String</code></td> <td>Includes multiline comments, too</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">String.Escape</code></td> <td>Escape sequences within strings</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">String.Interpol</code></td> <td>The brackets in f-strings</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Number</code></td> <td>All numbers</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Number.Integer</code></td> <td>Ints</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Number.Float</code></td> <td>Floats</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Number.Bin</code></td> <td>Binary numbers</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Number.Oct</code></td> <td>Octals</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Number.Hex</code></td> <td>Hex values</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Comment</code></td> <td>Single-line comments</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Keyword</code></td> <td>Lots of members – stuff like <code class="language-plaintext highlighter-rouge">def</code>, <code class="language-plaintext highlighter-rouge">class</code>, <code class="language-plaintext highlighter-rouge">True</code> and <code class="language-plaintext highlighter-rouge">False</code>, <code class="language-plaintext highlighter-rouge">if</code>/<code class="language-plaintext highlighter-rouge">elif</code>/<code class="language-plaintext highlighter-rouge">else</code> etc.</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Keyword.Constant</code></td> <td><code class="language-plaintext highlighter-rouge">True</code>, <code class="language-plaintext highlighter-rouge">False</code>, and <code class="language-plaintext highlighter-rouge">None</code></td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Keyword.Reserved</code></td> <td>A few core tokens like <code class="language-plaintext highlighter-rouge">except</code>, <code class="language-plaintext highlighter-rouge">finally</code>, <code class="language-plaintext highlighter-rouge">if</code>, <code class="language-plaintext highlighter-rouge">raise</code>, <code class="language-plaintext highlighter-rouge">while</code>, etc</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Keyword.Namespace</code></td> <td><code class="language-plaintext highlighter-rouge">import</code>, and <code class="language-plaintext highlighter-rouge">from</code>/<code class="language-plaintext highlighter-rouge">import</code></td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Operator</code></td> <td>Everything you’d expect, and also the Walrus</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Operator.Word</code></td> <td><code class="language-plaintext highlighter-rouge">in</code>, <code class="language-plaintext highlighter-rouge">is</code>, <code class="language-plaintext highlighter-rouge">and</code>, <code class="language-plaintext highlighter-rouge">or</code>, <code class="language-plaintext highlighter-rouge">not</code></td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Punctuation</code></td> <td>Brackets and parens</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Name.Builtin</code></td> <td>Builtin functions like <code class="language-plaintext highlighter-rouge">all()</code>, <code class="language-plaintext highlighter-rouge">max()</code>, <code class="language-plaintext highlighter-rouge">iter()</code></td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Name.Builtin.Pseudo</code></td> <td>Stuff like <code class="language-plaintext highlighter-rouge">self</code>, <code class="language-plaintext highlighter-rouge">Ellipsis</code>, <code class="language-plaintext highlighter-rouge">NotImplemented</code>, <code class="language-plaintext highlighter-rouge">cls</code></td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Name.Exception</code></td> <td>All of the builtin Exception types</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Name.Function</code></td> <td>the name of the function in the definition</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Name.Function.Magic</code></td> <td>Builtin dunder methods</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Name.Variable.Magic</code></td> <td>Builtin dunder object attributes</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Name.Decorator</code></td> <td>Both the <code class="language-plaintext highlighter-rouge">@</code> and the decorator name</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Name.Class</code></td> <td>I think this should be the name in the class definition but couldn’t confirm experimentally</td> </tr> </tbody> </table> <p>This enables some progress:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ipython_progress-480.webp 480w,/assets/img/ipython_progress-800.webp 800w,/assets/img/ipython_progress-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/ipython_progress.png" class="img-fluid z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>But tracebacks are still a catastrophe:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ipython_error_fail-480.webp 480w,/assets/img/ipython_error_fail-800.webp 800w,/assets/img/ipython_error_fail-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/ipython_error_fail.png" class="img-fluid z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>You can use the <code class="language-plaintext highlighter-rouge">InteractiveShell</code> setting mentioned above to turn off these colors entirely (<code class="language-plaintext highlighter-rouge">nocolor</code>) or make them insane (<code class="language-plaintext highlighter-rouge">LightBG</code>). But, even though <a href="https://github.com/pygments/pygments/blob/c155bc4e52e313a51a03f9dcafa64b92701a6829/pygments/lexers/python.py#L714">Pygmentize does provide a lexer for tracebacks</a>, you can’t use any kind of custom colors there. So, you’re stuck.</p> <p>On another note, you can also configure the prompts, which is cool. The <a href="https://ipython.readthedocs.io/en/stable/config/details.html#custom-prompts">IPython config docs</a> are a bit better here than on the color scheme, although I think the <a href="https://github.com/ipython/ipython/blob/0e4d6390b2174fb1b352a082b72ad387ae696e87/IPython/terminal/prompts.py#L13">actual prompt file</a> is more informative than the example they point to.</p> <pre><code class="language-python3">from IPython.terminal.prompts import Prompts, Token

class MyPrompt(Prompts):
     def in_prompt_tokens(self, cli=None):
         return [(Token.Prompt, '\e[0m \033[38;2;92;28;57m \uE0B0')]

## Class used to generate Prompt token for prompt_toolkit
c.TerminalInteractiveShell.prompts_class = MyPrompt
</code></pre> <p>Powerline glyphs like the above will work, but colorization using ANSI escape codes will… unfortunately not, which is unsurprising.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ipython_prompt-480.webp 480w,/assets/img/ipython_prompt-800.webp 800w,/assets/img/ipython_prompt-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/ipython_prompt.png" class="img-fluid z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>You are at the whims of the Pygments tokens that you provide, and it’s not clear to me whether there’s any hope of overriding the token colors outside of the parent <code class="language-plaintext highlighter-rouge">InteractiveShell.colors</code> specification. Anyway, here’s to hoping that someone jumps on this stuff in a future IPython PR.</p>]]></content><author><name></name></author><category term="hci"/><category term="repl"/><category term="python"/><summary type="html"><![CDATA[Syntax highlighting in IPython is a simple feature, but it’s a great one. The green-red back-and-forth between input and response makes scrolling back through a terminal session smooth and readable, and coloring individual tokens by semantic meaning is both informative and easy on the eyes, obviously (that’s why we do it in IDEs).]]></summary></entry><entry><title type="html">Creating presentations from Jupyter notebooks</title><link href="https://jsstevenson.github.io/blog/2022/jupyter-slides/" rel="alternate" type="text/html" title="Creating presentations from Jupyter notebooks"/><published>2022-01-12T00:00:00+00:00</published><updated>2022-01-12T00:00:00+00:00</updated><id>https://jsstevenson.github.io/blog/2022/jupyter-slides</id><content type="html" xml:base="https://jsstevenson.github.io/blog/2022/jupyter-slides/"><![CDATA[<p>The Jupyter notebook, <a href="https://www.youtube.com/watch?v=7jiPeIFXb6U">controversial though it may be</a>, is a core data exploration and experimentation platform for many in the data and scientific communities. In particular, its combination of REPL-like input and embedded HTML output make for an ideal means of generating and analyzing data tables and visualizations. This is great for sharing information with others – and, it turns out, the Jupyter ecosystem includes tooling to quickly generate <a href="https://revealjs.com/">reveal.js</a> presentations using the included <a href="https://github.com/jupyter/nbconvert">nbconvert</a> library.</p> <h2 id="getting-started">Getting started</h2> <p>For local service, you’ll need to provide a path to the reveal.js library. It’s probably easiest to clone it into the working directory of your notebook:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/hakimel/reveal.js.git
</code></pre></div></div> <p>Then, run the export command to initiate the reveal.js service:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jupyter nbconvert my_example_notebook.ipynb <span class="nt">--to</span> slides <span class="nt">--reveal-prefix</span> reveal.js <span class="nt">--post</span> serve
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">--to</code> option actually accepts a number of possible output formats, including PDF (try <code class="language-plaintext highlighter-rouge">jupyter nbconvert --help</code> to see other options), but the <code class="language-plaintext highlighter-rouge">slides</code> argument targets reveal.js slides. <code class="language-plaintext highlighter-rouge">--reveal-prefix</code> should point to your local reveal.js directory, and <code class="language-plaintext highlighter-rouge">--post serve</code> specifies that the reveal.js <code class="language-plaintext highlighter-rouge">serve</code> command should be run following conversion (a tab containing the live presentation should be opened on your default browser).</p> <p>By default, every cell is treated as a unique slide, but you have some basic control over how cells are turned into reveal.js objects. First, select the “slideshow” view from the menu:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/jupyter-reveal-view-menu-480.webp 480w,/assets/img/jupyter-reveal-view-menu-800.webp 800w,/assets/img/jupyter-reveal-view-menu-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/jupyter-reveal-view-menu.jpg" class="img-fluid z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>You can choose from a few different slide types for each cell:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/jupyter-reveal-slide-type-480.webp 480w,/assets/img/jupyter-reveal-slide-type-800.webp 800w,/assets/img/jupyter-reveal-slide-type-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/jupyter-reveal-slide-type.jpg" class="img-fluid z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>“Sub-slide” creates a separate slide which is grouped within the closest “Slide” (in reveal.js presentations, lateral movement will change parent “Slide” groups, while vertical movement will proceed within an individual slide grouping). A “fragment” will be conjoined to the previous slide/sub-slide, but will be revealed on an extra enter/arrow-key press/click (sort of like the “appear” animation in Powerpoint progressively reveals individual bullet points).</p> <p>A few closing notes:</p> <ul> <li> <p>The nbconvert docs suggest reverting your reveal.js source to version 3.5 (via <code class="language-plaintext highlighter-rouge">git checkout 3.5.0</code> in the reveal.js repo). I found that this broke some things and do not recommend it.</p> </li> <li> <p>Jupyter notebooks don’t immediately auto-save state, so remember to click the “save and checkpoint” button before exporting to ensure that you capture the most recent iteration of your work.</p> </li> <li> <p>Theoretically the HTML output should be able to pull requisite scripting from a reveal.js CDN, but it didn’t seem to work for me <code class="language-plaintext highlighter-rouge">¯\_(ツ)_/¯</code>. Maybe there are more <code class="language-plaintext highlighter-rouge">--reveal-prefix</code> related options? Who knows.</p> </li> <li> <p>Critically, reveal is flexible about sizing for a lot of things, but will struggle with images (and probably code output), so make sure to double-check that any visual output looks right in a presentation beforehand (you may need to resize it)</p> </li> </ul>]]></content><author><name></name></author><category term="python"/><category term="jupyter"/><category term="data visualization"/><summary type="html"><![CDATA[The Jupyter notebook, controversial though it may be, is a core data exploration and experimentation platform for many in the data and scientific communities. In particular, its combination of REPL-like input and embedded HTML output make for an ideal means of generating and analyzing data tables and visualizations. This is great for sharing information with others – and, it turns out, the Jupyter ecosystem includes tooling to quickly generate reveal.js presentations using the included nbconvert library.]]></summary></entry></feed>